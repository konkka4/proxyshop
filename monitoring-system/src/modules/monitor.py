import socket
import time
import os
from pathlib import Path
from datetime import datetime
from src.modules.proxy_config_writer import update_config, load_proxies, save_proxies
from src.modules.notifier import notify_admin

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
LOG_DIR = "logs"
LOG_FILE = Path(LOG_DIR) / "status.log"


def log_event(message):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π —É —Ñ–∞–π–ª —Ç–∞ –∫–æ–Ω—Å–æ–ª—å"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ª–æ–≥—ñ–≤, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        Path(LOG_DIR).mkdir(exist_ok=True)

        with open(LOG_FILE, "a", encoding="utf-8") as f:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            f.write(f"[{timestamp}] {message}\n")
        print(message)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—ñ: {e}")


def check_proxy(ip, port, timeout=3):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø—Ä–æ–∫—Å—ñ"""
    try:
        with socket.create_connection((ip, port), timeout=timeout):
            return True
    except (socket.timeout, ConnectionRefusedError, OSError) as e:
        log_event(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–∫—Å—ñ {ip}:{port}: {str(e)}")
        return False
    except Exception as e:
        log_event(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ {ip}:{port}: {str(e)}")
        return False


def restart_3proxy():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±–∏ 3proxy"""
    try:
        log_event("üîÑ Restarting 3proxy service...")
        os.system("sc stop 3proxy")
        time.sleep(3)  # –ó–∞–º—ñ—Å—Ç—å timeout 3
        os.system("sc start 3proxy")
        log_event("‚úÖ 3proxy service restarted successfully")
        return True
    except Exception as e:
        log_event(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É 3proxy: {str(e)}")
        notify_admin(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É 3proxy: {str(e)}")
        return False


def monitor_proxies():
    """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∫—Å—ñ-—Å–µ—Ä–≤–µ—Ä—ñ–≤"""
    while True:
        try:
            data = load_proxies()
            if not data or "active" not in data:
                log_event("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –ø—Ä–æ–∫—Å—ñ")
                time.sleep(60)
                continue

            active = data["active"]
            ip = active.get("ip")
            port = active.get("port")
            http_port = active.get("http_port")

            if not all([ip, port, http_port]):
                log_event("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—Ä–æ–∫—Å—ñ")
                time.sleep(60)
                continue

            if check_proxy(ip, port):
                log_event(f"‚úÖ Proxy {ip}:{port} is UP")
            else:
                log_event(f"‚ùå Proxy {ip}:{port} is DOWN")
                notify_admin(f"‚ùå Proxy {ip}:{port} –≤–ø–∞–≤! –ü–µ—Ä–µ–º–∏–∫–∞—é—Å—è –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π...")

                if "backup" not in data or not data["backup"]:
                    log_event("‚ùå –ù–µ–º–∞—î —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø—Ä–æ–∫—Å—ñ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è")
                    time.sleep(60)
                    continue

                backup = data["backup"]
                data["active"], data["backup"] = backup, data["active"]

                if not update_config(backup["ip"], backup["port"], backup["http_port"]):
                    log_event("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")
                    continue

                if not save_proxies(data):
                    log_event("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–∫—Å—ñ")
                    continue

                if not restart_3proxy():
                    continue

        except Exception as e:
            log_event(f"‚õî –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
            notify_admin(f"‚õî –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {str(e)}")

        time.sleep(60)
